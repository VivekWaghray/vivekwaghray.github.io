{"version":3,"file":"index.c6360fe8b69f6b5f1a4f.js","mappings":"yqBAIA,IAIIA,EAJEC,EAASC,SAASC,eAAe,WACjCC,EAAMH,EAAOI,WAAW,MAC9BD,EAAIH,OAAOK,MAAQC,OAAOC,WAC1BJ,EAAIH,OAAOQ,OAASF,OAAOG,YACT,IAEZC,EAAQ,WACZ,SAAAA,EAAYC,EAAGC,EAAGC,EAAYC,EAAYC,EAAMC,I,4FAAOC,CAAA,KAAAP,GACrDQ,KAAKP,EAAIA,EACTO,KAAKN,EAAIA,EACTM,KAAKL,WAAaA,EAClBK,KAAKJ,WAAaA,EAClBI,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,EACbE,KAAKC,OAASD,KAAKL,WACnBK,KAAKE,OAASF,KAAKJ,UACrB,C,QA4BC,O,EA1BDJ,G,EAAA,EAAAW,IAAA,OAAAC,MACA,WACEnB,EAAIoB,YACJpB,EAAIqB,IAAIN,KAAKP,EAAGO,KAAKN,EAAGM,KAAKH,KAAM,EAAa,EAAVU,KAAKC,IAAQ,GAEnDvB,EAAIwB,UAAY,UAChBxB,EAAIyB,MACN,GAEA,CAAAP,IAAA,SAAAC,MACA,YAEMJ,KAAKP,EAAIX,EAAOK,OAASa,KAAKP,EAAI,KACpCO,KAAKL,YAAcK,KAAKL,WACxBK,KAAKC,OAASD,KAAKL,aAEjBK,KAAKN,EAAIM,KAAKH,KAAOf,EAAOQ,QAAUU,KAAKN,EAAIM,KAAKH,KAAO,KAC7DG,KAAKJ,YAAcI,KAAKJ,WACxBI,KAAKE,OAASF,KAAKJ,YAIrBI,KAAKP,GAAKO,KAAKL,WACfK,KAAKN,GAAKM,KAAKJ,WAEfI,KAAKW,MACP,M,oEAACnB,CAAA,CAtCW,GA0Cd,SAASoB,IACP/B,EAAgB,GAEhB,IADA,IAAIgC,EAAqB/B,EAAOQ,OAASR,EAAOK,MAAS,IAChD2B,EAAI,EAAGA,EAAID,EAAmBC,IAAK,CAC1C,IAAIjB,EAAwB,GAAhBU,KAAKQ,SAAiB,EAC9BtB,EAAKc,KAAKQ,UAAa1B,WAAoB,EAAPQ,EAAoB,EAAPA,GAAoB,EAAPA,EAC9DH,EAAKa,KAAKQ,UAAaxB,YAAqB,EAAPM,EAAoB,EAAPA,GAAoB,EAAPA,EAC/DF,EAA8B,EAAhBY,KAAKQ,SAAgB,EACnCnB,EAA8B,EAAhBW,KAAKQ,SAAgB,EAGvClC,EAAcmC,KAAK,IAAIxB,EAASC,EAAGC,EAAGC,EAAYC,EAAYC,EADlD,SAEd,CACF,CAWAe,IARA,SAASK,IACPC,sBAAsBD,GACtBhC,EAAIkC,UAAU,EAAG,EAAG9B,WAAYE,aAEhC,IAAK,IAAIuB,EAAI,EAAGA,EAAIjC,EAAcuC,OAAQN,IACxCjC,EAAciC,GAAGO,QAErB,CAEAJ,GAGA7B,OAAOkC,iBACL,UACA,WACExC,EAAOK,MAAQE,WACfP,EAAOQ,OAASC,YAChBqB,GACF,G","sources":["webpack:///./javascripts/index.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\n/* eslint-disable max-len */\n/* eslint-disable no-plusplus */\n/* eslint-disable prefer-const */\nconst canvas = document.getElementById('canvas1');\nconst ctx = canvas.getContext('2d');\nctx.canvas.width = window.innerWidth;\nctx.canvas.height = window.innerHeight;\nlet particleArray;\n\nclass Particle {\n  constructor(x, y, directionX, directionY, size, color) {\n    this.x = x;\n    this.y = y;\n    this.directionX = directionX;\n    this.directionY = directionY;\n    this.size = size;\n    this.color = color;\n    this.speedX = this.directionX;\n    this.speedY = this.directionY;\n  }\n\n  // method to create each particle\n  draw() {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);\n\n    ctx.fillStyle = '#DB93B0';\n    ctx.fill();\n  }\n\n  // update particle position\n  update() {\n    // check if particle is still within screen\n    if (this.x > canvas.width || this.x < 0) {\n      this.directionX = -this.directionX;\n      this.speedX = this.directionX;\n    }\n    if (this.y + this.size > canvas.height || this.y - this.size < 0) {\n      this.directionY = -this.directionY;\n      this.speedY = this.directionY;\n    }\n    // remove collision detection\n    // move particle\n    this.x += this.directionX;\n    this.y += this.directionY;\n    // call draw method\n    this.draw();\n  }\n}\n\n// create particle array\nfunction init() {\n  particleArray = [];\n  let numberOfParticles = (canvas.height * canvas.width) / 9000;\n  for (let i = 0; i < numberOfParticles; i++) {\n    let size = (Math.random() * 20) + 1;\n    let x = (Math.random() * ((innerWidth - size * 2) - (size * 2)) + size * 2);\n    let y = (Math.random() * ((innerHeight - size * 2) - (size * 2)) + size * 2);\n    let directionX = (Math.random() * 2) - 1;\n    let directionY = (Math.random() * 2) - 1;\n\n    let color = 'black';\n    particleArray.push(new Particle(x, y, directionX, directionY, size, color));\n  }\n}\n\n// create animation loop\nfunction animate() {\n  requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, innerWidth, innerHeight);\n\n  for (let i = 0; i < particleArray.length; i++) {\n    particleArray[i].update();\n  }\n}\ninit();\nanimate();\n\n// RESIZE SETTING - empty and refill particle array every time window changes size + change canvas size\nwindow.addEventListener(\n  'resize',\n  () => {\n    canvas.width = innerWidth;\n    canvas.height = innerHeight;\n    init();\n  },\n);\n"],"names":["particleArray","canvas","document","getElementById","ctx","getContext","width","window","innerWidth","height","innerHeight","Particle","x","y","directionX","directionY","size","color","_classCallCheck","this","speedX","speedY","key","value","beginPath","arc","Math","PI","fillStyle","fill","draw","init","numberOfParticles","i","random","push","animate","requestAnimationFrame","clearRect","length","update","addEventListener"],"sourceRoot":""}